{"version":3,"sources":["components/ImageLinkForm/ImageLinkForm.js","components/ImageDisplay/ImageDisplay.js","App.js","serviceWorker.js","index.js"],"names":["ImageLinkForm","_ref","onInputChange","onButtonSubmit","react_default","a","createElement","className","type","placeholder","onChange","value","onClick","ImageDisplay","imageUrl","outputNames","src","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","imageURL","state","models","initModel","id","GENERAL_MODEL","version","then","generalModel","predict","response","concepts","map","el","name","onRouteChange","route","components_ImageLinkForm_ImageLinkForm","components_ImageDisplay_ImageDisplay","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAgBeA,SAZO,SAAAC,GAAsC,IAAnCC,EAAmCD,EAAnCC,cAAeC,EAAoBF,EAApBE,eACvC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,8EAC1BF,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,iBAAiBC,SAAUR,IAC1DE,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASG,MAAM,SAASC,QAAST,QCMlCU,SAbM,SAAAZ,GAA8B,IAA3Ba,EAA2Bb,EAA3Ba,SAAUC,EAAiBd,EAAjBc,YACjC,OACCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKU,IAAKF,KAEXV,EAAAC,EAAAC,cAAA,UACES,MCOAA,SAAc,IAEbE,EAAM,IAAIC,IAASC,IAAI,CAC5BC,OAAQ,qCAsDMD,cA/Cd,SAAAA,IAAa,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAQDtB,cAAgB,SAAC0B,GAChBP,EAAKQ,SAAU,CAACC,MAAMF,EAAMG,OAAOpB,SAVvBU,EAablB,eAAiB,SAACyB,GAEjBP,EAAKQ,SAAS,CAACG,SAAUX,EAAKY,MAAMH,QAGpCb,EAAIiB,OAAOC,UAAU,CAACC,GAAIlB,IAASmB,cAAeC,QAAS,qCACtDC,KAAK,SAAAC,GACJ,OAAOA,EAAaC,QAAQpB,EAAKY,MAAMD,YAExCO,KAAK,SAAAG,GACJ,IAAIC,EAAWD,EAAQ,QAAY,GAApB,cAEf3B,EAAc4B,EAASC,IAAI,SAACC,GAC3B,OAAOzC,EAAAC,EAAAC,cAAA,UAAKuC,EAAGC,WA1BVzB,EA+Bb0B,cAAgB,SAAEC,GACjB3B,EAAKQ,SAAU,CAACmB,MAAOA,KA9BvB3B,EAAKY,MAAQ,CACZH,MAAO,GACPE,SAAU,GACVgB,MAAO,UALI3B,wEAoCV,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC2C,EAAD,CACC/C,cAAesB,KAAKtB,cACpBC,eAAgBqB,KAAKrB,iBACtBC,EAAAC,EAAAC,cAAC4C,EAAD,CAAcpC,SAAUU,KAAKS,MAAMH,MAAOf,YAAaA,YA7C/CoC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.dc1f5034.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ( {onInputChange, onButtonSubmit} ) =>{\r\n\treturn(\r\n\t\t<div className=\"ImageLinkForm-wrap\">\r\n\t\t\t<p className=\"intro-text\"><em>Paste in the URL of an image to get data from it. Give it a go!</em></p>\r\n\t\t\t<form>\r\n\t\t\t\t<input type=\"text\" placeholder=\"Your image URL\" onChange={onInputChange}/>\r\n\t\t\t\t<input type=\"button\" value=\"Detect\" onClick={onButtonSubmit} />\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\nimport './ImageDisplay.css';\r\n\r\nconst ImageDisplay = ( {imageUrl, outputNames} ) =>{\r\n\treturn(\r\n\t\t<div className=\"imageDisplay-wrap\">\r\n\t\t\t<div>\r\n\t\t\t\t<img src={imageUrl} />\r\n\t\t\t</div>\r\n\t\t\t<ul>\r\n\t\t\t\t{outputNames}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ImageDisplay;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport ImageDisplay from './components/ImageDisplay/ImageDisplay';\nimport './App.css';\n\n\n//clarifai\n/*\napp.models.initModel({id: Clarifai.GENERAL_MODEL, version: \"aa7f35c01e0642fda5cf400f543e7c40\"})\n      .then(generalModel => {\n        return generalModel.predict(\"the-image-url\");\n      })\n      .then(response => {\n        var concepts = response['outputs'][0]['data']['concepts']\n      })\n*/\n\tlet outputNames = '';\n// Clarifai - initialize with your api key. This will also work in your browser via http://browserify.org/\nconst app = new Clarifai.App({\n apiKey: 'a11a8eabcae847c59ff089d9e47b8b03'\n});\n\nclass App extends Component {\n\n\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\timageURL: '',\n\t\t\troute: 'signin'\n\t\t}\n\t}\n\n\tonInputChange = (event) => {\n\t\tthis.setState( {input:event.target.value} );\n\t}\n\n\tonButtonSubmit = (event) =>{\n\n\t\tthis.setState({imageURL: this.state.input})\n\n\t\t\n\t\tapp.models.initModel({id: Clarifai.GENERAL_MODEL, version: \"aa7f35c01e0642fda5cf400f543e7c40\"})\n      .then(generalModel => {\n        return generalModel.predict(this.state.imageURL);\n      })\n      .then(response => {\n        var concepts = response['outputs'][0]['data']['concepts'];\n        //cicle trough the response\n        outputNames = concepts.map((el)=>{\n        \treturn <li>{el.name}</li>;\n        })\n      })\n\t}\n\n\tonRouteChange = ( route ) => {\n\t\tthis.setState( {route: route});\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n\t\t        <ImageLinkForm\n\t\t        \tonInputChange={this.onInputChange} \n\t\t        \tonButtonSubmit={this.onButtonSubmit} />\n\t\t        <ImageDisplay imageUrl={this.state.input} outputNames={outputNames}/>\n\t   </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}